1.Introduction

Connect to the network with openvpn or use a attack box of tryhackme.

2.Manual Enumeration

Using our Browsers Developer Console
Modern-day browsers including Chrome and Firefox have a suite of tools located in the "Developer Tools/Console". We're going to be discussing Firefox's, however,
Chrome has a very similar suite. This suite includes a range of tools including:

Viewing page source code
Finding assets
Debugging & executing code such as javascript on the client-side (our Browser)

Using "F12" on our keyboard, this is a shortcut to launch this suite of tools. We can search manually over the website with the dev tools and maybe we have luck a find
something.

3.Introduction to Gobuster 

Gobuster is already installed on Kali Linux else go on the following link and follow the instruction there : https://github.com/OJ/gobuster

Useful Global Flags

There are some useful Global flags that can be used as well. I've included them in the table below. You can review these in the main documentation as well - here.

Flag	Long Flag	Description
-t	--threads	Number of concurrent threads (default 10)
-v	--verbose	Verbose output
-z	--no-progress	Don't display progress
-q	--quiet	Don't print the banner and other noise
-o	--output	Output file to write results to

I will typically change the number of threads to 64 to increase the speed of my scans. If you don't change the number of threads, Gobuster can be a little slow.

4.Gobuster Modes

Using "dir" Mode
To use "dir" mode, you start by typing gobuster dir. This isn't the full command, but just the start. This tells Gobuster that you want to perform a directory search,
instead of one of its other methods (which we'll get to). It has to be written like this or else Gobuster will complain. After that, you will need to add the URL and 
wordlist using the -u and -w options, respectively. Like so:

gobuster dir -u http://10.10.10.10 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt

more useful flags/options under https://github.com/OJ/gobuster#dir-mode-options

some of the more commong flags/options

Flag	Long Flag	Description
-c	--cookies	Cookies to use for requests
-x	--extensions	File extension(s) to search for
-H	--headers	Specify HTTP headers, -H 'Header1: val1' -H 'Header2: val2'
-k	--no-tls-validation	Skip TLS certificate verification
-n	--no-status	Don't print status codes
-P	--password	Password for Basic Auth
-s	--status-codes	Positive status codes
-b	--status-codes-blacklist	Negative status codes
-U	--username	Username for Basic Auth


x is a useful flag/option to get some extensions
gobuster dir -u http://10.10.252.123/myfolder -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x.html,.css,.js,.txt,.conf

use -k to skip the cert in a Https website else it not gonna work probably at all and show probably nothing.This flag can be used with "dir" mode and "vhost" modes.

"dns" Mode

The next mode we'll focus on is the "dns" mode. This allows Gobuster to brute-force subdomains. During a penetration test (or capture the flag), it's important to check 
sub-domains of your target's top domain. Just because something is patched in the regular domain, does not mean it is patched in the sub-domain. There may be a vulnerability
for you to exploit in one of these sub-domains. For example, if State Farm owns statefarm.com and mobile.statefarm.com, there may be a hole in mobile.statefarm.com that is 
not present in statefarm.com. This is why it is important to search for subdomains too!

-d and -w are the main flags that you'll need for most of your scans. But there are a few others that are worth mentioning that we can go over. They are in the table below.
Flag	Long Flag	Description
-c	--show-cname	Show CNAME Records (cannot be used with '-i' option)
-i	--show-ips	Show IP Addresses
-r	--resolver	Use custom DNS server (format server.com or server.com:port)

more infos under https://github.com/OJ/gobuster#dns-mode-help

example command
gobuster dns -d mydomain.thm -w /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-5000.txt

"vhost" Mode

The last and final mode we'll focus on is the "vhost" mode. This allows Gobuster to brute-force virtual hosts. Virtual hosts are different websites on the same machine. In 
some instances, they can appear to look like sub-domains, but don't be deceived! Virtual Hosts are IP based and are running on the same server. This is not usually apparent
to the end-user. On an engagement, it may be worthwhile to just run Gobuster in this mode to see if it comes up with anything. You never know, it might just find something!
While participating in rooms on TryHackMe, virtual hosts would be a good way to hide a completely different website if nothing turned up on your main port 80/443 scan.

Using "vhost" Mode
To use "vhost" mode, you start by typing gobuster vhost. Just like the other modes, this isn't the full command, but just the start. This tells Gobuster that you want to
perform a virtual host brute-force, instead of one of the other methods as previously mentioned. It has to be written like this or else Gobuster will complain. After that, 
you will need to add the domain and wordlist using the -u and -w options, respectively. Like so:

gobuster vhost -u http://example.com -w /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-5000.txt

5.Useful Wordlists

Kali Linux Default Lists

Below you will find a useful list of wordlists that are installed on Kali Linux by default. This is as of the latest version at the time of writing which is 2020.3.
Anything with a wildcard (*) character indicates there's more than one list that matches. Keep in mind, a lot of these can be interchanged between modes. For example, 
"dir" mode wordlists (such as ones from the dirbuster directory) will contain words like "admin", "index", "about", "events", etc. A lot of these could be subdomains as well.
Give them a try with the different modes!

    /usr/share/wordlists/dirbuster/directory-list-2.3-*.txt
    /usr/share/wordlists/dirbuster/directory-list-1.0.txt
    /usr/share/wordlists/dirb/big.txt
    /usr/share/wordlists/dirb/common.txt
    /usr/share/wordlists/dirb/small.txt
    /usr/share/wordlists/dirb/extensions_common.txt - Useful for when fuzzing for files!

Non-Standard Lists

In addition to the above, Daniel Miessler has created an amazing GitHub repo called SecLists. It compiles many different lists used for many different things. 
The best part is, it's in apt! You can sudo apt install seclists and get the entire repo! We won't dive into any other lists as there are many. However, between what's 
installed by default on Kali and the SecLists repo, I doubt you'll need anything else.

6.Practical: Gobuster(Deploy #1)

Okay lets start with the practical stuff first we have to change the hosts file in the /etc/hosts , i would recommend to sudo nano /etc/hosts and then to add the values
and to save it.When u gonna try to change/add values in the folder you cant do it, because it has a write protection.

x.x.x.x=machine_ip

The echo method didnt work for me and i used sudo nano instead.

You will also need to add "webenum.thm" to your /etc/hosts file to start off with like so:
echo "x.x.x.x webenum.thm" >> /etc/hosts

You will also need to add any virtual hosts that you discover through the same way, before you can visit them in your browser i.e.:
echo "x.x.x.x mysubdomain.webenum.thm" >> /etc/hosts

I started with gobuster to get some directories
gobuster dir -u http://x.x.x.x -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt

For the second question you could make a new command with the -x flag/options and so on or what i did is open the website x.x.x.x/Changes and then i looked up the extensions.
The third question is to find a flag, i looked up in the directories if i could find something and i did find it under x.x.x.x/VIDEO/flag.php

The vhost mode is the next i used, gobuster vhost -u http://example.com -w /usr/share/wordlists/SecLists/Discovery/DNS/subdomains-top1million-5000.txt
You have to check if the directory is correct, by me i had to change it from SecLists to seclists and then it worked.

Had to look up the last 2 answers with a walkthrough because it did not work by me kinda the vhost search did not show up any useful result.I looked up the 
subdomains-top1million-5000.txt and there is even the learning and products in so i dont know exactly why it is not working.
I added the learning.webenum.thm and the products.webenum.thm and i could reach it and then i could see the flag under http://products.webenum.thm/flag.txt

Walktrough link:
https://octothorp88.medium.com/tryhackme-web-enumeration-d72c29941cff

My gobuster is 3.6 and this one in the walkthrough is 3.0.1 so maybe something changed or i missconfigured something.Have to test it with the attack box in future if this 
shows me a different result.

The answer in () is one answer
Answers:(public,changes,video),(conf,js),thm{n1c3_w0rk},learning,products,thm{gobuster_is_fun}

7.Introduction to WPScan

The WPScan framework is capable of enumerating & researching a few security vulnerability categories present in WordPress sites - including - but not limited to:

Sensitive Information Disclosure (Plugin & Theme installation versions for disclosed vulnerabilities or CVE's)
Path Discovery (Looking for misconfigured file permissions i.e. wp-config.php)
Weak Password Policies (Password bruteforcing)
Presence of Default Installation (Looking for default files)
Testing Web Application Firewalls (Common WAF plugins)

On Kali Linux it is already installed.

Update the WPScan with the following command wpscan --update

8.WPScan Modes


Enumerating for Installed Themes
We can look up how the theme is in a wordpress website with the developer tools of firefox/chrome and some searching.The other easier method is to use the WPScan wwith the 
following command 

wpscan --url http://cmnatics.playground/ --enumerate t 

Result
http://cmnatics.playground/wp-content/themes/twentytwentyone/assets

Enumerating for Installed Plugins
WPScan uses additional methods to discover plugins (such as looking for references or embeds on pages for plugin assets). We can use the --enumerate flag with the p argument
like so:

wpscan --url http://cmnatics.playground/ --enumerate p 

Enumerating for Users
We've highlighted that WPScan is capable of performing brute-forcing attacks. Whilst we must provide a password list such as rockyou.txt, the way how WPScan enumerates
for users is interestingly simple. WordPress sites use authors for posts. Authors are in fact a type of user.

wpscan --url http://cmnatics.playground/ --enumerate u 

The "Vulnerable" Flag

In the commands so far, we have only enumerated WordPress to discover what themes, plugins and users are present. At the moment, we'd have to look at the output and use 
sites such as MITRE, NVD and CVEDetails to look up the names of these plugins and the version numbers to determine any vulnerabilities.
WPScan has the v argument for the --enumerate flag. We provide this argument alongside another (such as p for plugins). For example, our syntax would like so: 
wpscan --url http://cmnatics.playground/ --enumerate vp 

Note, that this requires setting up WPScan to use the WPVulnDB API which is out-of-scope for this room. 
You need to get an API Token so you can connect to the Database and make 50 requests a day.

Performing a Password Attack
After determining a list of possible usernames on the WordPress install, we can use WPScan to perform a bruteforcing technique against the username we specify and a password
list that we provide. Simply, we use the output of our username enumeration to build a command like so: 

wpscan –-url http://cmnatics.playground –-passwords rockyou.txt –-usernames cmnatic

Adjusting WPScan's Aggressiveness (WAF)
Unless specified, WPScan will try to be as least "noisy" as possible. Lots of requests to a web server can trigger things such as firewalls and ultimately result in you 
being blocked by the server.

This means that some plugins and themes may be missed by our WPScan. Luckily, we can use arguments such as --plugins-detection and an aggressiveness profile 
(passive/aggressive) to specify this. For example: --plugins-detection aggressive

Answer:http://cmnatics.playground/wp-content/themes/twentynineteen,enumerate,passive

9.Practical: WPScan (Deploy #2)

Start the machine and add the machine_ip and wpscan.thm to your hosts file.
wpscan --url http://wpscan.thm/ --enumerate t
wpscan --url http://wpscan.thm/ --enumerate p
wpscan --url http://wpscan.thm/ --enumerate u
wpscan --url http://wpscan.thm --passwords rockyou.txt --usernames phreakazoid

Answers:twentynineteen,nextgen-gallery,phreakazoid,linkinpark

10.Introduction to Nikto

Nikto is already installed on Kali Linux.

11.Nikito Modes

Basic scan
nikto -h vulnerable_ip or domain

Scanning Multiple Hosts & Ports
For example, we can scan 172.16.0.0/24 (subnet mask 255.255.255.0, resulting in 254 possible hosts) with Nmap (using the default web port of 80) and parse the output to 
Nikto like so: nmap -p80 172.16.0.0/24 -oG - | nikto -h - 

There are not many circumstances where you would use this other than when you have gained access to a network. A much more common scenario will be scanning multiple ports 
on one specific host. We can do this by using the -p flag and providing a list of port numbers delimited by a comma - such as the following: 
nikto -h 10.10.10.1 -p 80,8000,8080

We can specify the plugin we wish to use by using the -Plugin argument and the name of the plugin we wish to use...For example, to use the "apacheuser" plugin, 
our Nikto scan would look like so: nikto -h 10.10.10.1 -Plugin apacheuser

List of plugins:
https://github.com/sullo/nikto/wiki/Plugin-list

Verbosing our Scan

We can increase the verbosity of our Nikto scan by providing the following arguments with the -Display flag. Unless specified, the output given by Nikto is not the entire 
output, as it can sometimes be irrelevant (but that isn't always the case!) 

Arguments are 1,2,E.
1:Show any redirects that are given by the web server.Web servers may want to relocate us to a specific file or directory, so we will need to adjust our scan accordingly for 
this.
2:Show any cookies received 	Applications often use cookies as a means of storing data. For example, web servers use sessions, where e-commerce sites may store products 
in your basket as these cookies. Credentials can also be stored in cookies.
E:Output any errors	This will be useful for debugging if your scan is not returning the results that you expect!

Nikto has several categories of vulnerabilities that we can specify our scan to enumerate and test for. The following list is not extensive and only include the ones that
you may commonly use. We can use the -Tuning flag and provide a value in our Nikto scan: 

Arguments are 0,2,3,4,8,9

0:FileUpload,2:Misconfig/Default,3:InformationDisclosure,4:Injection,8:CommandExecution,9:SQLInjection

Saving Your Findings
We can use the -o argument (short for -Output) and provide both a filename and compatible extension. We can specify the format (-f) specifically, but Nikto is smart enough
to use the extension we provide in the -o argument to adjust the output accordingly.Works for txt and html.

nikto -h http://ip_address -o report.html

Answers:(-p 80,8080),-Display 2

12.Nikto Practical (Deploy #3)

nikto -h machine_ip

nmap machine_ip -sV

nikto -h 10.10.64.208 -p 8080 -Display 2

Answers:apache/2.4.7,Apache-Coyote/1.1,JSESSIONID

13.Conclusion

Where to go from here (recommended rooms)

GoBuster:

    OWASP Top 10 (Walkthrough)
    EasyPeasyCTF (Challenge)

WPScan:

    Blog (Challenge)

Nikto:

    OWASP Top 10 (Walkthrough)
    ToolsRUs (Walkthrough)
    EasyCTF (Challenge)
