1.Getting started

Completing the web enumeration (or at least the Gobuster section) and What the Shell and Intro to Networking rooms would be a good idea before attempting the content in 
this room.
Copied the text since it is necessary to configure the host file and so on to complete this room.

Please read and follow the instructions in this task carefully. If you skip over this task and encounter connectivity errors as a result, the Discord volunteers reserve the 
right to ignore you.
The instructions in this task will help you to configure the hosts file (https://www.ionos.co.uk/digitalguide/server/configuration/hosts-file/) of your device. The hosts
file is used for local domain name mapping, bypassing DNS. In short, it allows you
to map IP addresses to domain names locally without relying on a DNS server to resolve the IP address for you. This is useful in environments such as TryHackMe where DNS 
is not available as it allows us to manually map one or more domains / subdomains to an
IP address of our choosing. Being able to access content using a domain makes it possible to (amongst many other advantages) use name-based virtual hosting -- commonly 
shortened to "vhosting" -- to serve multiple websites from a single webserver: a feature 
which is used extensively in this room.

It is very important that you understand these concepts before continuing. If any of the above information does not make sense, please do some background reading 
(e.g., https://tryhackme.com/room/introtonetworking) into how domain names, IP addresses, and
webserver VHosts work before continuing with the content of this room.

First up, let's deploy the machine to give it a few minutes to boot.

Once you've clicked deploy, you'll need to configure your own computer to be able to connect.

If you've successfully deployed the machine then the following code blocks will already have the IP address filled in. If any of them have "MACHâ€‹INE_IP" in them, then you 
still need to deploy the machine, and the following instructions will not work.

Using your favourite text editor in an administrative session, open the hosts file on your device.

On Linux and MacOS the hosts file can be found at /etc/hosts.
On Windows the hosts file can be found at C:\Windows\System32\drivers\etc\hosts.
On Linux or MacOS you will need to use sudo to open the file for writing. In Windows you will need to open the file with "Run as Administrator".

Add the following line in at the end of the file:

MACHINE_IP    overwrite.uploadvulns.thm shell.uploadvulns.thm java.uploadvulns.thm annex.uploadvulns.thm magic.uploadvulns.thm jewel.uploadvulns.thm demo.uploadvulns.thm

Note: If you have done this step before then you must remove the previous entry. There should only ever be one line in the file that contains the above URLs. For example, 
the following example will not work:

10.10.10.10    overwrite.uploadvulns.thm shell.uploadvulns.thm java.uploadvulns.thm annex.uploadvulns.thm magic.uploadvulns.thm jewel.uploadvulns.thm demo.uploadvulns.thm
MACHINE_IP    overwrite.uploadvulns.thm shell.uploadvulns.thm java.uploadvulns.thm annex.uploadvulns.thm magic.uploadvulns.thm jewel.uploadvulns.thm demo.uploadvulns.thm

When you terminate your instance of the upload vulns target machine, make sure to remove this line!

It goes without saying that you will not get the same IP address if you redeploy the target machine later. This means that any existing entries in your hosts file when you 
redeploy will point at the wrong address (ergo, connectivity error). If you add a 
duplicate line without removing the original, as mentioned above, you will also get a connectivity error. Removing it as soon as you terminate the machine gives you a clean 
slate and removes these possibilities for error.

You should now be able to access the virtual machine, so let's get started!

Note: If you find that you cannot access the websites, this is nearly always due to one of:
A) Having duplicate entries in your host file
B) Having an anonymising VPN active alongside your TryHackMe VPN connection pack

2.Introduction

The ability to upload files to a server has become an integral part of how we interact with web applications. Be it a profile picture for a social media website, a report
being uploaded to cloud storage, or saving a project on Github; the applications for file 
upload features are limitless.

Unfortunately, when handled badly, file uploads can also open up severe vulnerabilities in the server. This can lead to anything from relatively minor, nuisance problems; 
all the way up to full Remote Code Execution (RCE) if an attacker manages to upload and
execute a shell. With unrestricted upload access to a server (and the ability to retrieve data at will), an attacker could deface or otherwise alter existing content -- up 
to and including injecting malicious webpages, which lead to further vulnerabilities 
such as XSS or CSRF. By uploading arbitrary files, an attacker could potentially also use the server to host and/or serve illegal content, or to leak sensitive information.
Realistically speaking, an attacker with the ability to upload a file of their choice
to your server -- with no restrictions -- is very dangerous indeed.

The purpose of this room is to explore some of the vulnerabilities resulting from improper (or inadequate) handling of file uploads. Specifically, we will be looking at:

Overwriting existing files on a server
Uploading and Executing Shells on a server
Bypassing Client-Side filtering
Bypassing various kinds of Server-Side filtering
Fooling content type validation checks

3.General Methodology

Intercepting upload requests with Burpsuite will also come in handy. Browser extensions such as Wappalyser can provide valuable information at a glance about the site 
you're targetting.

With a basic understanding of how the website might be handling our input, we can then try to poke around and see what we can and can't upload. If the website is employing
client-side filtering then we can easily look at the code for the filter and look to bypass it (more on this later!). If the website has server-side filtering in place then
we may need to take a guess at what the filter is looking for, upload a file, then try something slightly different based on the error message if the upload fails. Uploading
files designed to provoke errors can help with this. Tools like Burpsuite or OWASP Zap can be very helpful at this stage. 

4.Overwriting Existing Files

To get to the website we have to use http://overwrite.uploadvulns.thm
I dont know why they did not correct it in the room since only overwrite.uploadvulns.thm did not work for me so be sure to add http:// before every uploadvulns.thm

Then we onspect the code of the webpage and we see the the image mountains.jpg we search for a jpg file or create one and then we name it the exact same to overwrite the 
existing file.After we uploaded it we get our flag.

Answers:mountains.jpg,THM{OTBiODQ3YmNjYWZhM2UyMmYzZDNiZjI5} 

5.Remote Code Execution

We use gobuster to enumerate the folder so we get to know where the uploaded files are saved.

gobuster dir -u http://shell.uploadvulns.thm -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt

We get the information that /resources is a folder with http://shell.uploadvulns.thm/resources we can look into the folder after we uploaded a file.

I used the php-reverse-shell.php from pentestmonkey.
https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php

I changed the ip address in the php to my tun0 (the ip it shows me in kali linux on the top right corner when i used the openvpn connection to the tryhackme servers)
I did not change the port but you can if you want just dont try to go under 1024 then you have to use sudo nc when i am not wrong.
then i setup a listener in the terminal with:
nc -lvnp 1234

After we edited the file and uploaded the php file and setup the listener we browse to the following address to execute the php.
http://shell.uploadvulns.thm/resources/php-reverse-shell.php

If everything worked we should see that our listener got a connection then we can check with whoami which user we are so we are to be sure that it connected
(mostly its www-data) and then we use ls to see the folder structure then we brwose to var with cd var and then we browse to www with cd www.In this folder we have a flag.txt
and we can see the content with cat flag.txt.

Answers:/resources,THM{YWFhY2U3ZGI4N2QxNmQzZjk0YjgzZDZk}


6.Filtering

Extension Validation:
They either blacklist extensions (i.e. have a list of extensions which are not allowed) or they whitelist extensions
(i.e. have a list of extensions which are allowed, and reject everything else).

File Type Filtering:
Similar to Extension validation, but more intensive, file type filtering looks, once again, to verify that the contents of a file are acceptable to upload. 
The MIME type for a file can be checked client-side and/or server-side; however, as MIME is based on the extension of the file, this is extremely easy to bypass.

File Length Filtering:
As an example, our fully fledged PHP reverse shell from the previous task is 5.4Kb big -- relatively tiny, but if the form expects a maximum of 2Kb then we would 
need to find an alternative shell to upload.

File Name Filtering:
As touched upon previously, files uploaded to a server should be unique. Usually this would mean adding a random aspect to the file name, however, an alternative strategy 
would be to check if a file with the same name already exists on the server, and give the user an error if so. Additionally, file names should be sanitised on upload to 
ensure that they don't contain any "bad characters", which could potentially cause problems on the file system when uploaded (e.g. null bytes or forward slashes on Linux, 
as well as control characters such as ; and potentially unicode characters). What this means for us is that, on a well administered system, our uploaded files are unlikely 
to have the same name we gave them before uploading, so be aware that you may have to go hunting for your shell in the event that you manage to bypass the content filtering.

File Content Filtering:
More complicated filtering systems may scan the full contents of an uploaded file to ensure that it's not spoofing its extension, MIME type and Magic Number. 
This is a significantly more complex process than the majority of basic filtration systems employ, and thus will not be covered in this room.

google: mime type csv

Answers:PHP,Whitelist,text/csv

7.Bypass Client-Side Filtering



8.Bypass Client-Side Filtering:File Extensions



9.Bypass Client-Side Filtering:Magic Numbers



10.Example Methodology



11.Challenge



12.Conclusion
